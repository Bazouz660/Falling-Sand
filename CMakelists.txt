# CMakeLists.txt

cmake_minimum_required(VERSION 3.10)
project(Sand C)

# Set the C standard to C99
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED True)

# Set release mode
set(CMAKE_BUILD_TYPE Release)

# Include directories
include_directories(
    ${PROJECT_SOURCE_DIR}/include
    "C:/CSFML/include"
)

# Library directories
link_directories("C:/CSFML/lib/gcc")

# Find all .c source files in the 'src' directory
file(GLOB_RECURSE SRC_FILES "${PROJECT_SOURCE_DIR}/src/*.c")

# If 'src' directory doesn't exist, search in the current directory
if(NOT SRC_FILES)
    file(GLOB_RECURSE SRC_FILES "${PROJECT_SOURCE_DIR}/*.c")
endif()

# Create executable
add_executable(${PROJECT_NAME} ${SRC_FILES})

# Link libraries
target_link_libraries(${PROJECT_NAME}
    "C:/CSFML/lib/gcc/libcsfml-graphics.a"
    "C:/CSFML/lib/gcc/libcsfml-audio.a"
    "C:/CSFML/lib/gcc/libcsfml-system.a"
    "C:/CSFML/lib/gcc/libcsfml-window.a"
    m  # Math library
)

# Optionally, you can add custom commands to display messages similar to the Makefile
add_custom_target(header
    COMMAND ${CMAKE_COMMAND} -E echo "Building files..."
    COMMENT "Header"
)

add_custom_target(done
    COMMAND ${CMAKE_COMMAND} -E echo "Build successful!"
    COMMENT "Done"
)

# Copy the binary to the root directory
# For windows, add the .exe extension
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${PROJECT_NAME}> ${PROJECT_SOURCE_DIR}/${PROJECT_NAME}.exe
)


add_dependencies(${PROJECT_NAME} header done)
